version: "3.9"

services:
  app:
    container_name: studioconnect-ai-app
    # Build the image from the Dockerfile in the current directory (.)
    build: .
    ports:
      # Map port 3000 on your Mac to port 3000 in the container
      - "3000:3000"
    volumes:
      # Mount your current project directory into the container at /app
      # This allows live code changes to be reflected without rebuilding the image.
      - .:/app
      # This is an anonymous volume for node_modules. It ensures that the
      # node_modules installed INSIDE the container (by Dockerfile's yarn install)
      # is used, and not overwritten by a local node_modules folder if it exists.
      - /app/node_modules
      # Anonymous volume for generated directory to preserve container's Prisma client
      - /app/generated
    environment:
      NODE_ENV: development
      PORT: 3000
      # Database URL points to the 'db' service name, using the credentials defined for it
      DATABASE_URL: ${DATABASE_URL}
      DIRECT_URL: ${DATABASE_URL}
      # These will be picked up from your local .env file (if it exists in your project root)
      # or from your shell environment if set there.
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000} # Default if not in .env
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      db:
        condition: service_healthy # Wait for the DB to be healthy before starting the app

  db:
    container_name: studioconnect-ai-db
    # Use an image that comes with PostgreSQL and pgvector pre-installed
    image: pgvector/pgvector:pg16 
    ports:
      # Map port 5434 on your Mac to port 5432 in the Postgres container
      # This avoids conflicts if you have another Postgres running locally on 5432.
      - "5434:5432"
    environment:
      POSTGRES_USER: db_user
      POSTGRES_PASSWORD: db_password
      POSTGRES_DB: app_db
    volumes:
      # Persist database data in a named volume
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U db_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: studioconnect-ai-redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "60", "1"]
    volumes:
      - redis_data:/data

volumes:
  postgres_data: # Defines the named volume for data persistence 
  redis_data: 