<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Client Intake Questions</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        h1, h2 {
            color: #333;
        }
        .questions-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        .questions-table {
            width: 100%;
            border-collapse: collapse;
        }
        .questions-table th,
        .questions-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        .questions-table th {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        .no-questions {
            text-align: center;
            color: #666;
            padding: 40px;
        }
        .add-question-form {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        label[for="isEssentialForEmergency"] {
            display: flex;
            align-items: center;
            font-weight: normal;
            cursor: pointer;
        }
        label[for="isEssentialForEmergency"] input[type="checkbox"] {
            width: auto;
            margin-right: 8px;
            margin-bottom: 0;
        }
        textarea,
        select,
        input[type="text"],
        input[type="number"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        textarea {
            min-height: 80px;
            resize: vertical;
        }
        button[type="submit"],
        .edit-btn,
        .delete-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button[type="submit"] {
            background-color: #007bff;
            color: white;
            padding: 12px 24px;
            font-size: 16px;
        }
        button[type="submit"]:hover {
            background-color: #0056b3;
        }
        .edit-btn {
            background-color: #28a745;
            color: white;
            margin-right: 8px;
        }
        .edit-btn:hover {
            background-color: #218838;
        }
        .delete-btn {
            background-color: #dc3545;
            color: white;
        }
        .delete-btn:hover {
            background-color: #c82333;
        }
        #formFeedback {
            margin-top: 20px;
            padding: 12px;
            border-radius: 4px;
            display: none;
        }
        #formFeedback.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        #formFeedback.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .action-buttons {
            display: flex;
            gap: 8px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/admin/dashboard">SMB AI Agent</a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/admin/dashboard">Dashboard</a>
                <a class="nav-link" href="/admin/leads">Clients</a>
                <a class="nav-link" href="/admin/settings">Agent Settings</a>
                <a class="nav-link active" href="/admin/lead-questions">Intake Questions</a>
                <a class="nav-link" href="/api/admin/logout">Logout</a>
            </div>
        </div>
    </nav>

    <h1>Manage Client Intake Questions</h1>

    <!-- Display Existing Questions -->
    <div class="questions-container">
        <h2>Existing Questions</h2>
        <% if (questions && questions.length > 0) { %>
            <table class="questions-table">
                <thead>
                    <tr>
                        <th>Order</th>
                        <th>Question Text</th>
                        <th>Expected Format</th>
                        <th>Maps To Client Field</th>
                        <th>Essential for Emergency</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% questions.forEach(function(question) { %>
                        <tr>
                            <td><%= question.order %></td>
                            <td><%= question.questionText %></td>
                            <td><%= question.expectedFormat %></td>
                            <td><%= question.mapsToLeadField || 'N/A' %></td>
                            <td><%= question.isEssentialForEmergency ? 'Yes' : 'No' %></td>
                            <td class="action-buttons">
                                <button class="edit-btn" 
                                        data-id="<%= question.id %>"
                                        data-text="<%= question.questionText %>"
                                        data-format="<%= question.expectedFormat %>"
                                        data-order="<%= question.order %>"
                                        data-maps-to="<%= question.mapsToLeadField || '' %>"
                                        data-essential="<%= question.isEssentialForEmergency %>">
                                    Edit
                                </button>
                                <button class="delete-btn" data-id="<%= question.id %>">Delete</button>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        <% } else { %>
            <div class="no-questions">
                <p>No client intake questions configured yet.</p>
            </div>
        <% } %>
    </div>

    <!-- Form to Add a New Question -->
    <div class="add-question-form">
        <h2>Add New Question</h2>
        <form id="addQuestionForm">
            <div class="form-group">
                <label for="questionText">Question Text:</label>
                <textarea id="questionText" name="questionText" required></textarea>
            </div>

            <div class="form-group">
                <label for="expectedFormat">Expected Format:</label>
                <select id="expectedFormat" name="expectedFormat">
                    <option value="TEXT">Text</option>
                    <option value="EMAIL">Email</option>
                    <option value="PHONE">Phone</option>
                </select>
            </div>

            <div class="form-group">
                <label for="mapsToLeadField">Maps to Client Field (optional):</label>
                <input type="text" id="mapsToLeadField" name="mapsToLeadField" placeholder="e.g., clientName, clientEmail, clientPhone, notes">
                <small>Leave empty if this question doesn't map to a specific client field</small>
            </div>

            <div class="form-group">
                <label for="isEssentialForEmergency">
                    <input type="checkbox" id="isEssentialForEmergency" name="isEssentialForEmergency" value="true">
                    Essential for Emergency Situations
                </label>
                <small>Check this if this question should be asked even in emergency situations where we want to minimize questions</small>
            </div>

            <div class="form-group">
                <label for="order">Order:</label>
                <input type="number" id="order" name="order" required>
            </div>

            <button type="submit">Add Question</button>
        </form>

        <div id="formFeedback"></div>
    </div>

    <script>
        // Get form elements
        const addQuestionForm = document.getElementById('addQuestionForm');
        const questionTextInput = document.getElementById('questionText');
        const expectedFormatSelect = document.getElementById('expectedFormat');
        const orderInput = document.getElementById('order');
        const mapsToLeadFieldInput = document.getElementById('mapsToLeadField');
        const isEssentialForEmergencyCheckbox = document.getElementById('isEssentialForEmergency');
        const submitButton = addQuestionForm.querySelector('button[type="submit"]');
        const formFeedback = document.getElementById('formFeedback');
        let currentlyEditingQuestionId = null;

        // Add Question Form Handler
        addQuestionForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            formFeedback.textContent = ''; // Clear previous messages
            
            const formData = {
                questionText: questionTextInput.value.trim(),
                expectedFormat: expectedFormatSelect.value,
                order: parseInt(orderInput.value, 10),
                mapsToLeadField: mapsToLeadFieldInput.value.trim() || null,
                isEssentialForEmergency: isEssentialForEmergencyCheckbox.checked
            };

            let url = '/api/admin/config/questions';
            let method = 'POST';

            if (currentlyEditingQuestionId) {
                url += `/${currentlyEditingQuestionId}`;
                method = 'PUT';
            }
            
            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    formFeedback.textContent = currentlyEditingQuestionId ? 
                        'Question updated successfully!' : 
                        'Question added successfully!';
                    formFeedback.className = 'success';
                    formFeedback.style.display = 'block';
                    
                    // Reset form state
                    addQuestionForm.reset();
                    submitButton.textContent = 'Add Question';
                    currentlyEditingQuestionId = null;
                    
                    // Reload page after 2 seconds to show updated list
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    throw new Error('Failed to process question');
                }
            } catch (error) {
                formFeedback.textContent = 'Error processing question. Please try again.';
                formFeedback.className = 'error';
                formFeedback.style.display = 'block';
            }
        });

        // Edit Question Handler
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', function() {
                const id = this.dataset.id;
                const text = this.dataset.text;
                const format = this.dataset.format;
                const order = this.dataset.order;
                const mapsTo = this.dataset.mapsTo;
                const essential = this.dataset.essential;

                // Populate form with question data
                questionTextInput.value = text;
                expectedFormatSelect.value = format;
                orderInput.value = order;
                mapsToLeadFieldInput.value = mapsTo;
                isEssentialForEmergencyCheckbox.checked = essential === 'true';

                // Update form state for editing
                currentlyEditingQuestionId = id;
                submitButton.textContent = 'Update Question';
                
                // Scroll to form
                addQuestionForm.scrollIntoView({ behavior: 'smooth' });
            });
        });

        // Delete Question Handler
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', async function() {
                const questionId = this.dataset.id;
                
                if (!confirm('Are you sure you want to delete this question?')) {
                    return;
                }

                try {
                    const response = await fetch(`/api/admin/config/questions/${questionId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        formFeedback.textContent = 'Question deleted successfully!';
                        formFeedback.className = 'success';
                        formFeedback.style.display = 'block';
                        
                        // Reload page after 2 seconds to show updated list
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } else {
                        const errorData = await response.json();
                        formFeedback.textContent = `Error deleting question: ${errorData.error || 'Unknown error'}`;
                        formFeedback.className = 'error';
                        formFeedback.style.display = 'block';
                    }
                } catch (error) {
                    formFeedback.textContent = 'Failed to delete question. Network error or server down.';
                    formFeedback.className = 'error';
                    formFeedback.style.display = 'block';
                    console.error('Delete question error:', error);
                }
            });
        });
    </script>
</body>
</html> 