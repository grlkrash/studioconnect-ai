<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Agent Settings</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: #333;
            margin-bottom: 30px;
        }
        
        .success-message {
            color: #10b981;
            background-color: #d1fae5;
            padding: 12px 16px;
            border-radius: 6px;
            margin-bottom: 20px;
        }
        
        form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        label {
            font-weight: 600;
            color: #374151;
            font-size: 14px;
        }
        
        input[type="text"],
        textarea {
            padding: 10px 14px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 16px;
            font-family: inherit;
            transition: border-color 0.15s ease-in-out;
        }
        
        input[type="text"]:focus,
        textarea:focus {
            outline: none;
            border-color: #0ea5e9;
            box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
        }
        
        textarea {
            resize: vertical;
            min-height: 80px;
        }
        
        .color-input-group {
            display: flex;
            gap: 20px;
        }
        
        .color-input-group .form-group {
            flex: 1;
        }
        
        button[type="submit"] {
            background-color: #0ea5e9;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.15s ease-in-out;
            align-self: flex-start;
        }
        
        button[type="submit"]:hover {
            background-color: #0284c7;
        }
        
        button[type="submit"]:disabled {
            background-color: #94a3b8;
            cursor: not-allowed;
        }
        
        #formFeedback {
            margin-top: 20px;
            padding: 12px 16px;
            border-radius: 6px;
            display: none;
        }
        
        #formFeedback.success {
            background-color: #d1fae5;
            color: #065f46;
            display: block;
        }
        
        #formFeedback.error {
            background-color: #fee2e2;
            color: #991b1b;
            display: block;
        }
        
        .back-link {
            display: inline-block;
            margin-bottom: 20px;
            color: #0ea5e9;
            text-decoration: none;
            font-size: 14px;
        }
        
        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/admin/dashboard">SMB AI Agent</a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/admin/dashboard">Dashboard</a>
                <a class="nav-link" href="/admin/leads">Clients</a>
                <a class="nav-link active" href="/admin/settings">Agent Settings</a>
                <a class="nav-link" href="/admin/knowledge-base">Knowledge Base</a>
                <a class="nav-link" href="/api/admin/logout">Logout</a>
            </div>
        </div>
    </nav>
    
    <div class="container">
        <a href="/admin/dashboard" class="back-link">‚Üê Back to Dashboard</a>
        
        <h1>Manage Agent Settings</h1>
        
        <% if (successMessage) { %>
            <div class="success-message">
                <%= successMessage %>
            </div>
        <% } %>
        
        <form id="agentSettingsForm">
            <div class="form-group">
                <label for="agentName">Agent Name:</label>
                <input 
                    type="text" 
                    id="agentName" 
                    name="agentName" 
                    value="<%= (agentConfig && agentConfig.agentName) ? agentConfig.agentName : 'AI Assistant' %>"
                    placeholder="Enter agent name"
                >
            </div>
            
            <div class="form-group">
                <label for="personaPrompt">Persona Prompt:</label>
                <textarea 
                    id="personaPrompt" 
                    name="personaPrompt" 
                    rows="5"
                    placeholder="Enter the persona prompt for your agent"
                ><%= (agentConfig && agentConfig.personaPrompt) ? agentConfig.personaPrompt : 'You are a helpful and friendly assistant.' %></textarea>
            </div>
            
            <div class="form-group">
                <label for="welcomeMessage">Welcome Message:</label>
                <textarea 
                    id="welcomeMessage" 
                    name="welcomeMessage" 
                    rows="3"
                    placeholder="Enter the welcome message for your chat widget and voice fallback"
                ><%= (agentConfig && agentConfig.welcomeMessage) ? agentConfig.welcomeMessage : 'Hello! How can I help you today?' %></textarea>
                <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                    Used for both chat widget and as fallback for voice calls. Use <strong>{businessName}</strong> to automatically include your business name.
                </small>
            </div>
            
            <div class="form-group">
                <label for="leadCaptureCompletionMessage">Lead Capture Completion Message (Optional):</label>
                <textarea 
                    id="leadCaptureCompletionMessage" 
                    name="leadCaptureCompletionMessage" 
                    rows="3"
                    placeholder="Enter the message shown after lead capture completion (e.g., 'Our {businessName} team will call you within 24 hours', 'A {businessName} agent will email you to schedule a consultation')"
                ><%= (agentConfig && agentConfig.leadCaptureCompletionMessage) ? agentConfig.leadCaptureCompletionMessage : '' %></textarea>
                <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                    If left empty, a default message will be used. Customize this to set proper expectations for your customers. Use <strong>{businessName}</strong> to automatically include your business name.
                </small>
            </div>
            
            <% if (business && business.planTier === 'PRO') { %>
            <!-- Voice/Call Agent Configuration - PRO Plan Only -->
            <div style="border-top: 2px solid #e5e7eb; margin-top: 30px; padding-top: 30px;">
                <h2 style="color: #333; font-size: 20px; margin-bottom: 20px; display: flex; align-items: center;">
                    üéôÔ∏è Voice Agent Configuration 
                    <span style="background: linear-gradient(45deg, #8b5cf6, #06b6d4); color: white; font-size: 12px; padding: 4px 8px; border-radius: 12px; margin-left: 12px; font-weight: 600;">PRO</span>
                </h2>
                
                <div class="form-group">
                    <label for="voiceGreetingMessage">Voice Greeting Message:</label>
                    <textarea 
                        id="voiceGreetingMessage" 
                        name="voiceGreetingMessage" 
                        rows="3"
                        placeholder="Enter the greeting message for voice calls (e.g., 'Hello! I'm your AI assistant from {businessName}. How can I help you today?')"
                    ><%= (agentConfig && agentConfig.voiceGreetingMessage) ? agentConfig.voiceGreetingMessage : '' %></textarea>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        This message will be spoken when someone calls your voice agent. Use <strong>{businessName}</strong> to automatically include your business name.
                    </small>
                </div>
                
                <div class="form-group">
                    <label for="voiceCompletionMessage">Voice Lead Completion Message:</label>
                    <textarea 
                        id="voiceCompletionMessage" 
                        name="voiceCompletionMessage" 
                        rows="3"
                        placeholder="Enter the message spoken after collecting lead information via voice (e.g., 'Thank you for providing your information. Our {businessName} team will contact you within 2 hours.')"
                    ><%= (agentConfig && agentConfig.voiceCompletionMessage) ? agentConfig.voiceCompletionMessage : '' %></textarea>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        This message is spoken after successfully capturing a lead through voice. Use <strong>{businessName}</strong> to automatically include your business name.
                    </small>
                </div>
                
                <div class="form-group">
                    <label for="voiceEmergencyMessage">Voice Emergency Response Message:</label>
                    <textarea 
                        id="voiceEmergencyMessage" 
                        name="voiceEmergencyMessage" 
                        rows="3"
                        placeholder="Enter the message for emergency situations (e.g., 'I understand this is urgent. I'm immediately notifying our {businessName} emergency response team. Someone will call you back within 5 minutes.')"
                    ><%= (agentConfig && agentConfig.voiceEmergencyMessage) ? agentConfig.voiceEmergencyMessage : '' %></textarea>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        This message is spoken when an emergency situation is detected during a voice call. Use <strong>{businessName}</strong> to automatically include your business name.
                    </small>
                </div>
                
                <div class="form-group">
                    <label for="voiceEndCallMessage">Voice Call Ending Message:</label>
                    <textarea 
                        id="voiceEndCallMessage" 
                        name="voiceEndCallMessage" 
                        rows="3"
                        placeholder="Enter the goodbye message for voice calls (e.g., 'Thank you for calling {businessName}. Have a great day and don't hesitate to call back if you need anything else.')"
                    ><%= (agentConfig && agentConfig.voiceEndCallMessage) ? agentConfig.voiceEndCallMessage : '' %></textarea>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        This message is spoken when ending a voice call. Use <strong>{businessName}</strong> to automatically include your business name.
                    </small>
                </div>
                
                <!-- Voice Technology Selection -->
                <div style="border-top: 1px solid #e5e7eb; margin-top: 20px; padding-top: 20px;">
                    <h3 style="color: #333; font-size: 18px; margin-bottom: 15px;">üéµ Voice Technology</h3>
                    
                    <div class="form-group">
                        <label for="ttsProvider">Voice Provider:</label>
                        <select 
                            id="ttsProvider" 
                            name="ttsProvider"
                            style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white;"
                        >
                            <option value="elevenlabs" <%= (!agentConfig || agentConfig.ttsProvider === 'elevenlabs' || !agentConfig.ttsProvider) ? 'selected' : '' %>>ElevenLabs (Premium AI Voices) - RECOMMENDED</option>
                            <option value="realtime" <%= (agentConfig && agentConfig.ttsProvider === 'realtime') ? 'selected' : '' %>>OpenAI Realtime (Streaming)</option>
                            <option value="openai" <%= (agentConfig && agentConfig.ttsProvider === 'openai') ? 'selected' : '' %>>OpenAI TTS (Standard)</option>
                            <option value="polly" <%= (agentConfig && agentConfig.ttsProvider === 'polly') ? 'selected' : '' %>>Amazon Polly (Fallback)</option>
                        </select>
                        <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                            <strong>ElevenLabs</strong> provides the most natural, human-like voices perfect for Fortune 500 clients. OpenAI Realtime offers low-latency streaming for conversations.
                        </small>
                    </div>

                    <!-- ElevenLabs Configuration -->
                    <div id="elevenlabsVoiceSection" class="form-group" style="display: block;">
                        <div style="background: linear-gradient(45deg, #8b5cf6, #06b6d4); color: white; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                            <h4 style="margin: 0 0 8px 0; font-size: 16px;">‚≠ê ElevenLabs Premium Voices</h4>
                            <p style="margin: 0; font-size: 14px; opacity: 0.9;">Enterprise-grade AI voices trusted by Fortune 500 companies for natural, engaging conversations.</p>
                        </div>
                        
                        <label for="elevenlabsVoice">ElevenLabs Voice:</label>
                        <select 
                            id="elevenlabsVoice" 
                            name="elevenlabsVoice"
                            style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white; width: 100%;"
                        >
                            <optgroup label="üè¢ Professional Business Voices">
                                <option value="pNInz6obpgDQGcFmaJgB" <%= (agentConfig && agentConfig.elevenlabsVoice === 'pNInz6obpgDQGcFmaJgB') ? 'selected' : ((!agentConfig || !agentConfig.elevenlabsVoice) ? 'selected' : '') %>>Adam (Warm, Professional Male) - RECOMMENDED</option>
                                <option value="EXAVITQu4vr4xnSDxMaL" <%= (agentConfig && agentConfig.elevenlabsVoice === 'EXAVITQu4vr4xnSDxMaL') ? 'selected' : '' %>>Sarah (Clear, Articulate Female)</option>
                                <option value="VR6AewLTigWG4xSOukaG" <%= (agentConfig && agentConfig.elevenlabsVoice === 'VR6AewLTigWG4xSOukaG') ? 'selected' : '' %>>Arnold (Confident, Authoritative Male)</option>
                                <option value="ErXwobaYiN019PkySvjV" <%= (agentConfig && agentConfig.elevenlabsVoice === 'ErXwobaYiN019PkySvjV') ? 'selected' : '' %>>Antoni (Friendly, Approachable Male)</option>
                                <option value="21m00Tcm4TlvDq8ikWAM" <%= (agentConfig && agentConfig.elevenlabsVoice === '21m00Tcm4TlvDq8ikWAM') ? 'selected' : '' %>>Rachel (Professional Female)</option>
                                <option value="AZnzlk1XvdvUeBnXmlld" <%= (agentConfig && agentConfig.elevenlabsVoice === 'AZnzlk1XvdvUeBnXmlld') ? 'selected' : '' %>>Domi (Energetic Female)</option>
                                <option value="CYw3kZ02Hs0563khs1Fj" <%= (agentConfig && agentConfig.elevenlabsVoice === 'CYw3kZ02Hs0563khs1Fj') ? 'selected' : '' %>>Dave (Conversational Male)</option>
                                <option value="FGY2WhTYpPnrIDTdsKH5" <%= (agentConfig && agentConfig.elevenlabsVoice === 'FGY2WhTYpPnrIDTdsKH5') ? 'selected' : '' %>>Laura (Calm, Professional Female)</option>
                                <option value="IKne3meq5aSn9XLyUdCD" <%= (agentConfig && agentConfig.elevenlabsVoice === 'IKne3meq5aSn9XLyUdCD') ? 'selected' : '' %>>Charlie (Upbeat Male)</option>
                                <option value="JBFqnCBsd6RMkjVDRZzb" <%= (agentConfig && agentConfig.elevenlabsVoice === 'JBFqnCBsd6RMkjVDRZzb') ? 'selected' : '' %>>George (Mature, Wise Male)</option>
                                <option value="N2lVS1w4EtoT3dr4eOWO" <%= (agentConfig && agentConfig.elevenlabsVoice === 'N2lVS1w4EtoT3dr4eOWO') ? 'selected' : '' %>>Callum (Strong, Confident Male)</option>
                                <option value="TX3LPaxmHKxFdv7VOQHJ" <%= (agentConfig && agentConfig.elevenlabsVoice === 'TX3LPaxmHKxFdv7VOQHJ') ? 'selected' : '' %>>Liam (Young, Professional Male)</option>
                                <option value="ThT5KcBeYPX3keUQqHPh" <%= (agentConfig && agentConfig.elevenlabsVoice === 'ThT5KcBeYPX3keUQqHPh') ? 'selected' : '' %>>Dorothy (Mature, Wise Female)</option>
                                <option value="XB0fDUnXU5powFXDhCwa" <%= (agentConfig && agentConfig.elevenlabsVoice === 'XB0fDUnXU5powFXDhCwa') ? 'selected' : '' %>>Charlotte (Elegant Female)</option>
                                <option value="Xb7hH8MSUJpSbSDYk0k2" <%= (agentConfig && agentConfig.elevenlabsVoice === 'Xb7hH8MSUJpSbSDYk0k2') ? 'selected' : '' %>>Alice (Bright, Cheerful Female)</option>
                                <option value="bIHbv24MWmeRgasZH58o" <%= (agentConfig && agentConfig.elevenlabsVoice === 'bIHbv24MWmeRgasZH58o') ? 'selected' : '' %>>Will (Smooth, Professional Male)</option>
                                <option value="flq6f7yk4E4fJM5XTYuZ" <%= (agentConfig && agentConfig.elevenlabsVoice === 'flq6f7yk4E4fJM5XTYuZ') ? 'selected' : '' %>>Michael (Deep, Authoritative Male)</option>
                                <option value="g5CIjZEefAph4nQFvHAz" <%= (agentConfig && agentConfig.elevenlabsVoice === 'g5CIjZEefAph4nQFvHAz') ? 'selected' : '' %>>Ethan (Versatile Male)</option>
                                <option value="jBpfuIE2acCO8z3wKNLl" <%= (agentConfig && agentConfig.elevenlabsVoice === 'jBpfuIE2acCO8z3wKNLl') ? 'selected' : '' %>>Gigi (Vibrant Female)</option>
                                <option value="jsCqWAovK2LkecY7zXl4" <%= (agentConfig && agentConfig.elevenlabsVoice === 'jsCqWAovK2LkecY7zXl4') ? 'selected' : '' %>>Freya (Young, Fresh Female)</option>
                                <option value="nPczCjzI2devNBz1zQrb" <%= (agentConfig && agentConfig.elevenlabsVoice === 'nPczCjzI2devNBz1zQrb') ? 'selected' : '' %>>Brian (Calm, Steady Male)</option>
                                <option value="oWAxZDx7w5VEj9dCyTzz" <%= (agentConfig && agentConfig.elevenlabsVoice === 'oWAxZDx7w5VEj9dCyTzz') ? 'selected' : '' %>>Grace (Gentle, Professional Female)</option>
                                <option value="pqHfZKP75CvOlQylNhV4" <%= (agentConfig && agentConfig.elevenlabsVoice === 'pqHfZKP75CvOlQylNhV4') ? 'selected' : '' %>>Bill (Friendly, Reliable Male)</option>
                                <option value="t0jbNlBVZ17f02VDIeMI" <%= (agentConfig && agentConfig.elevenlabsVoice === 't0jbNlBVZ17f02VDIeMI') ? 'selected' : '' %>>Valentino (Sophisticated Male)</option>
                                <option value="yoZ06aMxZJJ28mfd3POQ" <%= (agentConfig && agentConfig.elevenlabsVoice === 'yoZ06aMxZJJ28mfd3POQ') ? 'selected' : '' %>>Sam (Neutral, Professional)</option>
                            </optgroup>
                            <optgroup label="üÜï Load More Voices">
                                <option value="load_more_voices">üîÑ Load Available Voices from ElevenLabs</option>
                            </optgroup>
                        </select>
                        <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                            Choose the ElevenLabs voice that best represents your brand. Adam is recommended for most business applications.
                        </small>

                        <!-- Voice Preview Button -->
                        <div style="margin-top: 10px;">
                            <button type="button" id="previewVoiceBtn" style="background-color: #8b5cf6; color: white; padding: 8px 16px; border: none; border-radius: 6px; font-size: 14px; cursor: pointer; margin-right: 10px;">
                                üéµ Preview Voice
                            </button>
                            <button type="button" id="loadVoicesBtn" style="background-color: #06b6d4; color: white; padding: 8px 16px; border: none; border-radius: 6px; font-size: 14px; cursor: pointer;">
                                üîÑ Refresh Voice List
                            </button>
                        </div>

                        <div class="form-group" style="margin-top: 15px;">
                            <label for="elevenlabsModel">ElevenLabs Model:</label>
                            <select 
                                id="elevenlabsModel" 
                                name="elevenlabsModel"
                                style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white;"
                            >
                                <option value="eleven_turbo_v2_5" <%= (!agentConfig || agentConfig.elevenlabsModel === 'eleven_turbo_v2_5' || !agentConfig.elevenlabsModel) ? 'selected' : '' %>>Turbo v2.5 (Fastest, Real-time) - RECOMMENDED</option>
                                <option value="eleven_multilingual_v2" <%= (agentConfig && agentConfig.elevenlabsModel === 'eleven_multilingual_v2') ? 'selected' : '' %>>Multilingual v2 (High Quality, 32 Languages)</option>
                                <option value="eleven_flash_v2_5" <%= (agentConfig && agentConfig.elevenlabsModel === 'eleven_flash_v2_5') ? 'selected' : '' %>>Flash v2.5 (Ultra-Fast, Low Latency)</option>
                                <option value="eleven_monolingual_v1" <%= (agentConfig && agentConfig.elevenlabsModel === 'eleven_monolingual_v1') ? 'selected' : '' %>>Monolingual v1 (English Only, Stable)</option>
                            </select>
                            <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                                Turbo v2.5 is optimized for real-time voice conversations with minimal latency.
                            </small>
                        </div>

                        <!-- Advanced Voice Settings -->
                        <div style="border: 1px solid #e5e7eb; border-radius: 6px; padding: 15px; margin-top: 15px;">
                            <h4 style="margin: 0 0 15px 0; font-size: 16px; color: #333;">üéöÔ∏è Advanced Voice Settings</h4>
                            
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                                <div class="form-group">
                                    <label for="voiceStability">Stability (0.0 - 1.0):</label>
                                    <input 
                                        type="range" 
                                        id="voiceStability" 
                                        name="voiceStability" 
                                        min="0" 
                                        max="1" 
                                        step="0.1" 
                                        value="<%= (agentConfig && agentConfig.voiceSettings && agentConfig.voiceSettings.stability !== undefined) ? agentConfig.voiceSettings.stability : '0.5' %>"
                                        style="width: 100%;"
                                    >
                                    <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280;">
                                        <span>More Expressive</span>
                                        <span id="stabilityValue">0.5</span>
                                        <span>More Stable</span>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="voiceSimilarity">Similarity (0.0 - 1.0):</label>
                                    <input 
                                        type="range" 
                                        id="voiceSimilarity" 
                                        name="voiceSimilarity" 
                                        min="0" 
                                        max="1" 
                                        step="0.1" 
                                        value="<%= (agentConfig && agentConfig.voiceSettings && agentConfig.voiceSettings.similarity !== undefined) ? agentConfig.voiceSettings.similarity : '0.8' %>"
                                        style="width: 100%;"
                                    >
                                    <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280;">
                                        <span>More Creative</span>
                                        <span id="similarityValue">0.8</span>
                                        <span>More Accurate</span>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="voiceStyle">Style (0.0 - 1.0):</label>
                                    <input 
                                        type="range" 
                                        id="voiceStyle" 
                                        name="voiceStyle" 
                                        min="0" 
                                        max="1" 
                                        step="0.1" 
                                        value="<%= (agentConfig && agentConfig.voiceSettings && agentConfig.voiceSettings.style !== undefined) ? agentConfig.voiceSettings.style : '0.0' %>"
                                        style="width: 100%;"
                                    >
                                    <div style="display: flex; justify-content: space-between; font-size: 12px; color: #6b7280;">
                                        <span>Neutral</span>
                                        <span id="styleValue">0.0</span>
                                        <span>Emphasized</span>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label>
                                        <input 
                                            type="checkbox" 
                                            id="voiceSpeakerBoost" 
                                            name="voiceSpeakerBoost" 
                                            <%= (agentConfig && agentConfig.voiceSettings && agentConfig.voiceSettings.use_speaker_boost !== false) ? 'checked' : 'checked' %>
                                            style="margin-right: 8px;"
                                        >
                                        Speaker Boost (Recommended)
                                    </label>
                                    <small style="color: #6b7280; font-size: 12px; display: block; margin-top: 4px;">
                                        Enhances voice clarity for phone calls
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div id="openaiVoiceSection" class="form-group" style="display: none;">
                        <label for="openaiVoice">OpenAI Voice:</label>
                        <select 
                            id="openaiVoice" 
                            name="openaiVoice"
                            style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white;"
                        >
                            <option value="alloy" <%= (agentConfig && agentConfig.openaiVoice === 'alloy') ? 'selected' : '' %>>Alloy (Professional Male Voice)</option>
                            <option value="echo" <%= (agentConfig && agentConfig.openaiVoice === 'echo') ? 'selected' : '' %>>Echo (Dramatic Male Voice)</option>
                            <option value="fable" <%= (agentConfig && agentConfig.openaiVoice === 'fable') ? 'selected' : '' %>>Fable (Story-teller Male Voice)</option>
                            <option value="onyx" <%= (agentConfig && agentConfig.openaiVoice === 'onyx') ? 'selected' : '' %>>Onyx (Deep, Professional Male Voice)</option>
                            <option value="nova" <%= (agentConfig && agentConfig.openaiVoice === 'nova') ? 'selected' : ((!agentConfig || !agentConfig.openaiVoice) ? 'selected' : '') %>>Nova (Conversational Female Voice) - Default</option>
                            <option value="shimmer" <%= (agentConfig && agentConfig.openaiVoice === 'shimmer') ? 'selected' : '' %>>Shimmer (Expressive Female Voice)</option>
                        </select>
                        <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                            Choose the OpenAI voice that best fits your brand personality. Nova is recommended for most business use cases.
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label for="openaiModel">TTS Model:</label>
                        <select 
                            id="openaiModel" 
                            name="openaiModel"
                            style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white;"
                        >
                            <option value="eleven_turbo_v2_5" <%= (agentConfig && agentConfig.openaiModel === 'eleven_turbo_v2_5') ? 'selected' : ((!agentConfig || !agentConfig.openaiModel) ? 'selected' : '') %>>ElevenLabs Turbo v2.5 (Default)</option>
                            <option value="tts-1" <%= (agentConfig && agentConfig.openaiModel === 'tts-1') ? 'selected' : '' %>>OpenAI TTS-1 (Standard, Fast)</option>
                            <option value="tts-1-hd" <%= (agentConfig && agentConfig.openaiModel === 'tts-1-hd') ? 'selected' : '' %>>OpenAI TTS-1-HD (High Quality, Slower)</option>
                        </select>
                        <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                            Model selection will automatically match your chosen provider.
                        </small>
                    </div>
                </div>
            <% } %>
            
            <div class="color-input-group">
                <div class="form-group">
                    <label for="primaryColor">Primary Color (hex):</label>
                    <input 
                        type="text" 
                        id="primaryColor" 
                        name="primaryColor" 
                        value="<%= (agentConfig && agentConfig.colorTheme && typeof agentConfig.colorTheme === 'object' && agentConfig.colorTheme.primary) ? agentConfig.colorTheme.primary : '#0ea5e9' %>"
                        placeholder="#0ea5e9"
                        pattern="^#[0-9A-Fa-f]{6}$"
                        title="Please enter a valid hex color (e.g., #0ea5e9)"
                    >
                </div>
                
                <div class="form-group">
                    <label for="secondaryColor">Secondary Color (hex):</label>
                    <input 
                        type="text" 
                        id="secondaryColor" 
                        name="secondaryColor" 
                        value="<%= (agentConfig && agentConfig.colorTheme && typeof agentConfig.colorTheme === 'object' && agentConfig.colorTheme.secondary) ? agentConfig.colorTheme.secondary : '#64748b' %>"
                        placeholder="#64748b"
                        pattern="^#[0-9A-Fa-f]{6}$"
                        title="Please enter a valid hex color (e.g., #64748b)"
                    >
                </div>
            </div>
            
            <button type="submit">Save Settings</button>
        </form>
        
        <div id="formFeedback"></div>
    </div>

    <script>
        // Get form and feedback elements
        const agentSettingsForm = document.getElementById('agentSettingsForm');
        const formFeedback = document.getElementById('formFeedback');
        
        // Add event listener for form submission
        agentSettingsForm.addEventListener('submit', async function(event) {
            event.preventDefault();
            
            // Clear any previous messages
            formFeedback.textContent = '';
            formFeedback.className = '';
            formFeedback.style.display = 'none';
            
            // Get values from input fields
            const agentName = document.getElementById('agentName').value;
            const personaPrompt = document.getElementById('personaPrompt').value;
            const welcomeMessage = document.getElementById('welcomeMessage').value;
            const leadCaptureCompletionMessage = document.getElementById('leadCaptureCompletionMessage').value;
            const primaryColorValue = document.getElementById('primaryColor').value;
            const secondaryColorValue = document.getElementById('secondaryColor').value;
            
            // Get voice agent configuration values (if PRO plan)
            const voiceGreetingMessage = document.getElementById('voiceGreetingMessage')?.value || '';
            const voiceCompletionMessage = document.getElementById('voiceCompletionMessage')?.value || '';
            const voiceEmergencyMessage = document.getElementById('voiceEmergencyMessage')?.value || '';
            const voiceEndCallMessage = document.getElementById('voiceEndCallMessage')?.value || '';
            
            // Get TTS configuration values (if PRO plan)
            const ttsProvider = document.getElementById('ttsProvider')?.value || 'elevenlabs';
            const openaiVoice = document.getElementById('openaiVoice')?.value || 'nova';
            const openaiModel = document.getElementById('openaiModel')?.value || 'eleven_turbo_v2_5';
            
            // Get ElevenLabs configuration
            const elevenlabsVoice = document.getElementById('elevenlabsVoice')?.value || 'pNInz6obpgDQGcFmaJgB';
            const elevenlabsModel = document.getElementById('elevenlabsModel')?.value || 'eleven_turbo_v2_5';
            
            // Get voice settings
            const voiceStability = parseFloat(document.getElementById('voiceStability')?.value || '0.5');
            const voiceSimilarity = parseFloat(document.getElementById('voiceSimilarity')?.value || '0.8');
            const voiceStyle = parseFloat(document.getElementById('voiceStyle')?.value || '0.0');
            const voiceSpeakerBoost = document.getElementById('voiceSpeakerBoost')?.checked || true;
            
            const voiceSettings = {
                stability: voiceStability,
                similarity: voiceSimilarity,
                style: voiceStyle,
                use_speaker_boost: voiceSpeakerBoost
            };
            
            // Construct colorTheme object
            const colorTheme = {
                primary: primaryColorValue,
                secondary: secondaryColorValue
            };
            
            // Construct form data object
            const formData = {
                agentName,
                personaPrompt,
                welcomeMessage,
                leadCaptureCompletionMessage,
                colorTheme,
                voiceGreetingMessage,
                voiceCompletionMessage,
                voiceEmergencyMessage,
                voiceEndCallMessage,
                ttsProvider,
                openaiVoice,
                openaiModel,
                elevenlabsVoice,
                elevenlabsModel,
                voiceSettings
            };
            
            try {
                // Send POST request to API endpoint
                const response = await fetch('/api/admin/config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                // Handle response
                if (response.ok) {
                    // Success
                    const result = await response.json();
                    formFeedback.textContent = 'Settings saved successfully!';
                    formFeedback.className = 'success';
                    formFeedback.style.display = 'block';
                    
                    // Optional: Redirect with success message after a short delay
                    setTimeout(() => {
                        window.location.href = '/admin/settings?success=true';
                    }, 1500);
                } else {
                    // Error
                    const errorResult = await response.json();
                    formFeedback.textContent = 'Error saving settings: ' + (errorResult.error || 'Unknown error');
                    formFeedback.className = 'error';
                    formFeedback.style.display = 'block';
                }
            } catch (error) {
                // Network or other error
                formFeedback.textContent = 'Error saving settings: ' + error.message;
                formFeedback.className = 'error';
                formFeedback.style.display = 'block';
            }
        });
        
        // Handle TTS provider switching (if PRO plan)
        const ttsProviderSelect = document.getElementById('ttsProvider');
        const elevenlabsVoiceSection = document.getElementById('elevenlabsVoiceSection');
        const openaiVoiceSection = document.getElementById('openaiVoiceSection');
        
        if (ttsProviderSelect) {
            function toggleVoiceSections() {
                const ttsProvider = ttsProviderSelect.value;
                
                // Show/hide provider-specific sections
                if (elevenlabsVoiceSection) {
                    elevenlabsVoiceSection.style.display = ttsProvider === 'elevenlabs' ? 'block' : 'none';
                }
                if (openaiVoiceSection) {
                    openaiVoiceSection.style.display = (ttsProvider === 'openai' || ttsProvider === 'realtime') ? 'block' : 'none';
                }
            }
            
            // Initial state
            toggleVoiceSections();
            
            // Handle select changes
            ttsProviderSelect.addEventListener('change', toggleVoiceSections);
        }

        // Voice settings sliders
        const stabilitySlider = document.getElementById('voiceStability');
        const similaritySlider = document.getElementById('voiceSimilarity');
        const styleSlider = document.getElementById('voiceStyle');
        const stabilityValue = document.getElementById('stabilityValue');
        const similarityValue = document.getElementById('similarityValue');
        const styleValue = document.getElementById('styleValue');

        if (stabilitySlider && stabilityValue) {
            stabilitySlider.addEventListener('input', function() {
                stabilityValue.textContent = this.value;
            });
            stabilityValue.textContent = stabilitySlider.value;
        }

        if (similaritySlider && similarityValue) {
            similaritySlider.addEventListener('input', function() {
                similarityValue.textContent = this.value;
            });
            similarityValue.textContent = similaritySlider.value;
        }

        if (styleSlider && styleValue) {
            styleSlider.addEventListener('input', function() {
                styleValue.textContent = this.value;
            });
            styleValue.textContent = styleSlider.value;
        }

        // Voice preview functionality
        const previewVoiceBtn = document.getElementById('previewVoiceBtn');
        const loadVoicesBtn = document.getElementById('loadVoicesBtn');
        const elevenlabsVoiceSelect = document.getElementById('elevenlabsVoice');

        if (previewVoiceBtn) {
            previewVoiceBtn.addEventListener('click', async function() {
                const voiceId = elevenlabsVoiceSelect?.value;
                if (!voiceId || voiceId === 'load_more_voices') {
                    alert('Please select a valid voice first.');
                    return;
                }

                this.disabled = true;
                this.textContent = 'üéµ Generating Preview...';

                try {
                    const response = await fetch('/api/voice-preview', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            text: 'Hello! This is a preview of your selected voice. I\'m your AI assistant, ready to help with your creative projects and business needs.',
                            voiceId: voiceId,
                            voiceSettings: {
                                stability: parseFloat(stabilitySlider?.value || '0.5'),
                                similarity: parseFloat(similaritySlider?.value || '0.8'),
                                style: parseFloat(styleSlider?.value || '0.0'),
                                use_speaker_boost: document.getElementById('voiceSpeakerBoost')?.checked || true
                            }
                        })
                    });

                    if (response.ok) {
                        const blob = await response.blob();
                        const audio = new Audio(URL.createObjectURL(blob));
                        audio.play();
                        this.textContent = 'üéµ Preview Voice';
                    } else {
                        throw new Error('Failed to generate preview');
                    }
                } catch (error) {
                    console.error('Voice preview error:', error);
                    alert('Failed to generate voice preview. Please check your ElevenLabs configuration.');
                    this.textContent = 'üéµ Preview Voice';
                } finally {
                    this.disabled = false;
                }
            });
        }

        if (loadVoicesBtn) {
            loadVoicesBtn.addEventListener('click', async function() {
                this.disabled = true;
                this.textContent = 'üîÑ Loading...';

                try {
                    const response = await fetch('/api/elevenlabs/voices');
                    if (response.ok) {
                        const data = await response.json();
                        const select = elevenlabsVoiceSelect;
                        
                        // Clear existing options except the first optgroup
                        const firstOptgroup = select.querySelector('optgroup');
                        select.innerHTML = '';
                        if (firstOptgroup) select.appendChild(firstOptgroup);

                        // Add loaded voices
                        const loadedGroup = document.createElement('optgroup');
                        loadedGroup.label = 'üîÑ Available Voices';
                        
                        if (data.voices && Array.isArray(data.voices)) {
                            data.voices.forEach(voice => {
                                const option = document.createElement('option');
                                option.value = voice.voice_id;
                                option.textContent = `${voice.name} (${voice.category || 'Custom'})`;
                                loadedGroup.appendChild(option);
                            });
                        }
                        
                        select.appendChild(loadedGroup);
                        this.textContent = 'üîÑ Refresh Voice List';
                    } else {
                        throw new Error('Failed to load voices');
                    }
                } catch (error) {
                    console.error('Load voices error:', error);
                    alert('Failed to load voices. Please check your ElevenLabs API key.');
                    this.textContent = 'üîÑ Refresh Voice List';
                } finally {
                    this.disabled = false;
                }
            });
        }
    </script>
</body>
</html> 