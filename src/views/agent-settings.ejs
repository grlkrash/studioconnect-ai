<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Agent Settings</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: #333;
            margin-bottom: 30px;
        }
        
        .success-message {
            color: #10b981;
            background-color: #d1fae5;
            padding: 12px 16px;
            border-radius: 6px;
            margin-bottom: 20px;
        }
        
        form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        label {
            font-weight: 600;
            color: #374151;
            font-size: 14px;
        }
        
        input[type="text"],
        textarea {
            padding: 10px 14px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 16px;
            font-family: inherit;
            transition: border-color 0.15s ease-in-out;
        }
        
        input[type="text"]:focus,
        textarea:focus {
            outline: none;
            border-color: #0ea5e9;
            box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
        }
        
        textarea {
            resize: vertical;
            min-height: 80px;
        }
        
        .color-input-group {
            display: flex;
            gap: 20px;
        }
        
        .color-input-group .form-group {
            flex: 1;
        }
        
        button[type="submit"] {
            background-color: #0ea5e9;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.15s ease-in-out;
            align-self: flex-start;
        }
        
        button[type="submit"]:hover {
            background-color: #0284c7;
        }
        
        button[type="submit"]:disabled {
            background-color: #94a3b8;
            cursor: not-allowed;
        }
        
        #formFeedback {
            margin-top: 20px;
            padding: 12px 16px;
            border-radius: 6px;
            display: none;
        }
        
        #formFeedback.success {
            background-color: #d1fae5;
            color: #065f46;
            display: block;
        }
        
        #formFeedback.error {
            background-color: #fee2e2;
            color: #991b1b;
            display: block;
        }
        
        .back-link {
            display: inline-block;
            margin-bottom: 20px;
            color: #0ea5e9;
            text-decoration: none;
            font-size: 14px;
        }
        
        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/admin/dashboard">SMB AI Agent</a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/admin/dashboard">Dashboard</a>
                <a class="nav-link" href="/admin/leads">Clients</a>
                <a class="nav-link active" href="/admin/settings">Agent Settings</a>
                <a class="nav-link" href="/admin/knowledge-base">Knowledge Base</a>
                <a class="nav-link" href="/api/admin/logout">Logout</a>
            </div>
        </div>
    </nav>
    
    <div class="container">
        <a href="/admin/dashboard" class="back-link">‚Üê Back to Dashboard</a>
        
        <h1>Manage Agent Settings</h1>
        
        <% if (successMessage) { %>
            <div class="success-message">
                <%= successMessage %>
            </div>
        <% } %>
        
        <form id="agentSettingsForm">
            <div class="form-group">
                <label for="agentName">Agent Name:</label>
                <input 
                    type="text" 
                    id="agentName" 
                    name="agentName" 
                    value="<%= (agentConfig && agentConfig.agentName) ? agentConfig.agentName : 'AI Assistant' %>"
                    placeholder="Enter agent name"
                >
            </div>
            
            <div class="form-group">
                <label for="personaPrompt">Persona Prompt:</label>
                <textarea 
                    id="personaPrompt" 
                    name="personaPrompt" 
                    rows="5"
                    placeholder="Enter the persona prompt for your agent"
                ><%= (agentConfig && agentConfig.personaPrompt) ? agentConfig.personaPrompt : 'You are a helpful and friendly assistant.' %></textarea>
            </div>
            
            <div class="form-group">
                <label for="welcomeMessage">Welcome Message:</label>
                <textarea 
                    id="welcomeMessage" 
                    name="welcomeMessage" 
                    rows="3"
                    placeholder="Enter the welcome message for your chat widget and voice fallback"
                ><%= (agentConfig && agentConfig.welcomeMessage) ? agentConfig.welcomeMessage : 'Hello! How can I help you today?' %></textarea>
                <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                    Used for both chat widget and as fallback for voice calls. Use <strong>{businessName}</strong> to automatically include your business name.
                </small>
            </div>
            
            <div class="form-group">
                <label for="leadCaptureCompletionMessage">Lead Capture Completion Message (Optional):</label>
                <textarea 
                    id="leadCaptureCompletionMessage" 
                    name="leadCaptureCompletionMessage" 
                    rows="3"
                    placeholder="Enter the message shown after lead capture completion (e.g., 'Our {businessName} team will call you within 24 hours', 'A {businessName} agent will email you to schedule a consultation')"
                ><%= (agentConfig && agentConfig.leadCaptureCompletionMessage) ? agentConfig.leadCaptureCompletionMessage : '' %></textarea>
                <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                    If left empty, a default message will be used. Customize this to set proper expectations for your customers. Use <strong>{businessName}</strong> to automatically include your business name.
                </small>
            </div>
            
            <% if (business && business.planTier === 'PRO') { %>
            <!-- Voice/Call Agent Configuration - PRO Plan Only -->
            <div style="border-top: 2px solid #e5e7eb; margin-top: 30px; padding-top: 30px;">
                <h2 style="color: #333; font-size: 20px; margin-bottom: 20px; display: flex; align-items: center;">
                    üéôÔ∏è Voice Agent Configuration 
                    <span style="background: linear-gradient(45deg, #8b5cf6, #06b6d4); color: white; font-size: 12px; padding: 4px 8px; border-radius: 12px; margin-left: 12px; font-weight: 600;">PRO</span>
                </h2>
                
                <div class="form-group">
                    <label for="voiceGreetingMessage">Voice Greeting Message:</label>
                    <textarea 
                        id="voiceGreetingMessage" 
                        name="voiceGreetingMessage" 
                        rows="3"
                        placeholder="Enter the greeting message for voice calls (e.g., 'Hello! I'm your AI assistant from {businessName}. How can I help you today?')"
                    ><%= (agentConfig && agentConfig.voiceGreetingMessage) ? agentConfig.voiceGreetingMessage : '' %></textarea>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        This message will be spoken when someone calls your voice agent. Use <strong>{businessName}</strong> to automatically include your business name.
                    </small>
                </div>
                
                <div class="form-group">
                    <label for="voiceCompletionMessage">Voice Lead Completion Message:</label>
                    <textarea 
                        id="voiceCompletionMessage" 
                        name="voiceCompletionMessage" 
                        rows="3"
                        placeholder="Enter the message spoken after collecting lead information via voice (e.g., 'Thank you for providing your information. Our {businessName} team will contact you within 2 hours.')"
                    ><%= (agentConfig && agentConfig.voiceCompletionMessage) ? agentConfig.voiceCompletionMessage : '' %></textarea>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        This message is spoken after successfully capturing a lead through voice. Use <strong>{businessName}</strong> to automatically include your business name.
                    </small>
                </div>
                
                <div class="form-group">
                    <label for="voiceEmergencyMessage">Voice Emergency Response Message:</label>
                    <textarea 
                        id="voiceEmergencyMessage" 
                        name="voiceEmergencyMessage" 
                        rows="3"
                        placeholder="Enter the message for emergency situations (e.g., 'I understand this is urgent. I'm immediately notifying our {businessName} emergency response team. Someone will call you back within 5 minutes.')"
                    ><%= (agentConfig && agentConfig.voiceEmergencyMessage) ? agentConfig.voiceEmergencyMessage : '' %></textarea>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        This message is spoken when an emergency situation is detected during a voice call. Use <strong>{businessName}</strong> to automatically include your business name.
                    </small>
                </div>
                
                <div class="form-group">
                    <label for="voiceEndCallMessage">Voice Call Ending Message:</label>
                    <textarea 
                        id="voiceEndCallMessage" 
                        name="voiceEndCallMessage" 
                        rows="3"
                        placeholder="Enter the goodbye message for voice calls (e.g., 'Thank you for calling {businessName}. Have a great day and don't hesitate to call back if you need anything else.')"
                    ><%= (agentConfig && agentConfig.voiceEndCallMessage) ? agentConfig.voiceEndCallMessage : '' %></textarea>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        This message is spoken when ending a voice call. Use <strong>{businessName}</strong> to automatically include your business name.
                    </small>
                </div>
                
                <!-- Voice Technology Selection -->
                <div style="border-top: 1px solid #e5e7eb; margin-top: 20px; padding-top: 20px;">
                    <h3 style="color: #333; font-size: 18px; margin-bottom: 15px;">üéµ Voice Technology</h3>
                    
                    <div class="form-group">
                        <label for="ttsProvider">Voice Mode:</label>
                        <select 
                            id="ttsProvider" 
                            name="ttsProvider"
                            style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white;"
                        >
                            <option value="realtime" <%= (agentConfig && agentConfig.ttsProvider === 'realtime') ? 'selected' : '' %>>Realtime Streaming (OpenAI)</option>
                            <option value="openai" <%= (!agentConfig || agentConfig.ttsProvider === 'openai' || (!agentConfig.ttsProvider && agentConfig.useOpenaiTts !== false)) ? 'selected' : '' %>>OpenAI TTS (Batch)</option>
                            <option value="polly" <%= (agentConfig && agentConfig.ttsProvider === 'polly') ? 'selected' : '' %>>Amazon Polly Fallback</option>
                        </select>
                        <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                            "Realtime" uses OpenAI's streaming voice model for the most natural experience. Choose TTS for lower latency scenarios or Polly for compliance reasons.
                        </small>
                    </div>
                    
                    <div id="openaiVoiceSection" class="form-group">
                        <label for="openaiVoice">OpenAI Voice:</label>
                        <select 
                            id="openaiVoice" 
                            name="openaiVoice"
                            style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white;"
                        >
                            <option value="ALLOY" <%= (agentConfig && agentConfig.openaiVoice === 'ALLOY') ? 'selected' : '' %>>Alloy (Professional Male Voice)</option>
                            <option value="ECHO" <%= (agentConfig && agentConfig.openaiVoice === 'ECHO') ? 'selected' : '' %>>Echo (Dramatic Male Voice)</option>
                            <option value="FABLE" <%= (agentConfig && agentConfig.openaiVoice === 'FABLE') ? 'selected' : '' %>>Fable (Story-teller Male Voice)</option>
                            <option value="ONYX" <%= (agentConfig && agentConfig.openaiVoice === 'ONYX') ? 'selected' : '' %>>Onyx (Deep, Professional Male Voice)</option>
                            <option value="NOVA" <%= (agentConfig && agentConfig.openaiVoice === 'NOVA') ? 'selected' : ((!agentConfig || !agentConfig.openaiVoice) ? 'selected' : '') %>>Nova (Conversational Female Voice) - Default</option>
                            <option value="SHIMMER" <%= (agentConfig && agentConfig.openaiVoice === 'SHIMMER') ? 'selected' : '' %>>Shimmer (Expressive Female Voice)</option>
                        </select>
                        <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                            Choose the OpenAI voice that best fits your brand personality. Nova is recommended for most business use cases.
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label for="openaiModel">OpenAI TTS Model:</label>
                        <select 
                            id="openaiModel" 
                            name="openaiModel"
                            style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white;"
                        >
                            <option value="tts-1" <%= (agentConfig && agentConfig.openaiModel === 'tts-1') ? 'selected' : ((!agentConfig || !agentConfig.openaiModel) ? 'selected' : '') %>>TTS-1 (Standard, Fast)</option>
                            <option value="tts-1-hd" <%= (agentConfig && agentConfig.openaiModel === 'tts-1-hd') ? 'selected' : '' %>>TTS-1-HD (High Quality, Slower)</option>
                        </select>
                        <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                            TTS-1 is faster and suitable for real-time applications. TTS-1-HD provides higher quality audio.
                        </small>
                    </div>
                </div>
                
                <!-- Fallback Twilio Configuration -->
                <div id="twilioVoiceSection" style="border-top: 1px solid #e5e7eb; margin-top: 20px; padding-top: 20px;">
                    <h3 style="color: #333; font-size: 18px; margin-bottom: 15px;">üìû Twilio Fallback Configuration</h3>
                    <small style="color: #6b7280; font-size: 13px; margin-bottom: 15px; display: block;">
                        These settings are used when OpenAI TTS is unavailable or disabled.
                    </small>
                
                <div class="form-group">
                    <label for="twilioVoice">Twilio Voice:</label>
                    <select 
                        id="twilioVoice" 
                        name="twilioVoice"
                        style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white;"
                    >
                        <!-- Standard Voices -->
                        <optgroup label="üéµ Standard Voices">
                            <option value="alice" <%= (agentConfig && agentConfig.twilioVoice === 'alice') ? 'selected' : '' %>>Alice (Standard Female)</option>
                            <option value="man" <%= (agentConfig && agentConfig.twilioVoice === 'man') ? 'selected' : '' %>>Man (Standard Male)</option>
                            <option value="woman" <%= (agentConfig && agentConfig.twilioVoice === 'woman') ? 'selected' : '' %>>Woman (Standard Female)</option>
                        </optgroup>
                        
                        <!-- Premium Voices (Polly Neural) -->
                        <optgroup label="‚≠ê Premium Voices (Neural)">
                            <option value="Polly.Joanna" <%= (agentConfig && agentConfig.twilioVoice === 'Polly.Joanna') ? 'selected' : '' %>>Joanna (Premium Female - US)</option>
                            <option value="Polly.Matthew" <%= (agentConfig && agentConfig.twilioVoice === 'Polly.Matthew') ? 'selected' : '' %>>Matthew (Premium Male - US)</option>
                            <option value="Polly.Salli" <%= (agentConfig && agentConfig.twilioVoice === 'Polly.Salli') ? 'selected' : '' %>>Salli (Premium Female - US)</option>
                            <option value="Polly.Joey" <%= (agentConfig && agentConfig.twilioVoice === 'Polly.Joey') ? 'selected' : '' %>>Joey (Premium Male - US)</option>
                            <option value="Polly.Kimberly" <%= (agentConfig && agentConfig.twilioVoice === 'Polly.Kimberly') ? 'selected' : '' %>>Kimberly (Premium Female - US)</option>
                            <option value="Polly.Amy" <%= (agentConfig && agentConfig.twilioVoice === 'Polly.Amy') ? 'selected' : '' %>>Amy (Premium Female - UK)</option>
                            <option value="Polly.Brian" <%= (agentConfig && agentConfig.twilioVoice === 'Polly.Brian') ? 'selected' : '' %>>Brian (Premium Male - UK)</option>
                        </optgroup>
                        
                        <!-- Generative Voices - English (US) -->
                        <optgroup label="üöÄ Generative Voices - English (US)">
                            <!-- Google Chirp3-HD Voices -->
                            <option value="en-US-Chirp3-HD-Aoede" <%= (agentConfig && agentConfig.twilioVoice === 'en-US-Chirp3-HD-Aoede') ? 'selected' : '' %>>Aoede (Generative Female - Google)</option>
                            <option value="en-US-Chirp3-HD-Charon" <%= (agentConfig && agentConfig.twilioVoice === 'en-US-Chirp3-HD-Charon') ? 'selected' : '' %>>Charon (Generative Male - Google)</option>
                            <option value="en-US-Chirp3-HD-Fenrir" <%= (agentConfig && agentConfig.twilioVoice === 'en-US-Chirp3-HD-Fenrir') ? 'selected' : '' %>>Fenrir (Generative Male - Google)</option>
                            <option value="en-US-Chirp3-HD-Kore" <%= (agentConfig && agentConfig.twilioVoice === 'en-US-Chirp3-HD-Kore') ? 'selected' : '' %>>Kore (Generative Female - Google)</option>
                            <option value="en-US-Chirp3-HD-Leda" <%= (agentConfig && agentConfig.twilioVoice === 'en-US-Chirp3-HD-Leda') ? 'selected' : '' %>>Leda (Generative Female - Google)</option>
                            <option value="en-US-Chirp3-HD-Orus" <%= (agentConfig && agentConfig.twilioVoice === 'en-US-Chirp3-HD-Orus') ? 'selected' : '' %>>Orus (Generative Male - Google)</option>
                            <option value="en-US-Chirp3-HD-Puck" <%= (agentConfig && agentConfig.twilioVoice === 'en-US-Chirp3-HD-Puck') ? 'selected' : '' %>>Puck (Generative Male - Google)</option>
                            <option value="en-US-Chirp3-HD-Zephyr" <%= (agentConfig && agentConfig.twilioVoice === 'en-US-Chirp3-HD-Zephyr') ? 'selected' : '' %>>Zephyr (Generative Female - Google)</option>
                            <!-- Amazon Polly Generative Voices -->
                            <option value="Danielle-Generative" <%= (agentConfig && agentConfig.twilioVoice === 'Danielle-Generative') ? 'selected' : '' %>>Danielle (Generative Female - Polly)</option>
                            <option value="Joanna-Generative" <%= (agentConfig && agentConfig.twilioVoice === 'Joanna-Generative') ? 'selected' : '' %>>Joanna (Generative Female - Polly)</option>
                            <option value="Matthew-Generative" <%= (agentConfig && agentConfig.twilioVoice === 'Matthew-Generative') ? 'selected' : '' %>>Matthew (Generative Male - Polly)</option>
                            <option value="Ruth-Generative" <%= (agentConfig && agentConfig.twilioVoice === 'Ruth-Generative') ? 'selected' : '' %>>Ruth (Generative Female - Polly)</option>
                            <option value="Stephen-Generative" <%= (agentConfig && agentConfig.twilioVoice === 'Stephen-Generative') ? 'selected' : '' %>>Stephen (Generative Male - Polly)</option>
                        </optgroup>
                        
                        <!-- Generative Voices - Spanish (US) -->
                        <optgroup label="üöÄ Generative Voices - Spanish (US)">
                            <!-- Google Chirp3-HD Voices -->
                            <option value="es-US-Chirp3-HD-Aoede" <%= (agentConfig && agentConfig.twilioVoice === 'es-US-Chirp3-HD-Aoede') ? 'selected' : '' %>>Aoede (Generative Female - Google)</option>
                            <option value="es-US-Chirp3-HD-Charon" <%= (agentConfig && agentConfig.twilioVoice === 'es-US-Chirp3-HD-Charon') ? 'selected' : '' %>>Charon (Generative Male - Google)</option>
                            <option value="es-US-Chirp3-HD-Fenrir" <%= (agentConfig && agentConfig.twilioVoice === 'es-US-Chirp3-HD-Fenrir') ? 'selected' : '' %>>Fenrir (Generative Male - Google)</option>
                            <option value="es-US-Chirp3-HD-Kore" <%= (agentConfig && agentConfig.twilioVoice === 'es-US-Chirp3-HD-Kore') ? 'selected' : '' %>>Kore (Generative Female - Google)</option>
                            <option value="es-US-Chirp3-HD-Leda" <%= (agentConfig && agentConfig.twilioVoice === 'es-US-Chirp3-HD-Leda') ? 'selected' : '' %>>Leda (Generative Female - Google)</option>
                            <option value="es-US-Chirp3-HD-Orus" <%= (agentConfig && agentConfig.twilioVoice === 'es-US-Chirp3-HD-Orus') ? 'selected' : '' %>>Orus (Generative Male - Google)</option>
                            <option value="es-US-Chirp3-HD-Puck" <%= (agentConfig && agentConfig.twilioVoice === 'es-US-Chirp3-HD-Puck') ? 'selected' : '' %>>Puck (Generative Male - Google)</option>
                            <option value="es-US-Chirp3-HD-Zephyr" <%= (agentConfig && agentConfig.twilioVoice === 'es-US-Chirp3-HD-Zephyr') ? 'selected' : '' %>>Zephyr (Generative Female - Google)</option>
                            <!-- Amazon Polly Generative Voices -->
                            <option value="Lupe-Generative" <%= (agentConfig && agentConfig.twilioVoice === 'Lupe-Generative') ? 'selected' : '' %>>Lupe (Generative Female - Polly)</option>
                            <option value="Pedro-Generative" <%= (agentConfig && agentConfig.twilioVoice === 'Pedro-Generative') ? 'selected' : '' %>>Pedro (Generative Male - Polly)</option>
                        </optgroup>
                    </select>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        Select the voice to use for Twilio voice calls when OpenAI TTS is unavailable.
                    </small>
                </div>
                
                <div class="form-group">
                    <label for="twilioLanguage">Twilio Language:</label>
                    <select 
                        id="twilioLanguage" 
                        name="twilioLanguage"
                        style="padding: 10px 14px; border: 1px solid #d1d5db; border-radius: 6px; font-size: 16px; font-family: inherit; transition: border-color 0.15s ease-in-out; background-color: white;"
                    >
                        <option value="en-US" <%= (agentConfig && agentConfig.twilioLanguage === 'en-US') ? 'selected' : '' %>>English (US)</option>
                        <option value="en-GB" <%= (agentConfig && agentConfig.twilioLanguage === 'en-GB') ? 'selected' : '' %>>English (UK)</option>
                        <option value="en-AU" <%= (agentConfig && agentConfig.twilioLanguage === 'en-AU') ? 'selected' : '' %>>English (Australia)</option>
                        <option value="es-US" <%= (agentConfig && agentConfig.twilioLanguage === 'es-US') ? 'selected' : '' %>>Spanish (US)</option>
                        <option value="es-ES" <%= (agentConfig && agentConfig.twilioLanguage === 'es-ES') ? 'selected' : '' %>>Spanish (Spain)</option>
                        <option value="fr-FR" <%= (agentConfig && agentConfig.twilioLanguage === 'fr-FR') ? 'selected' : '' %>>French (France)</option>
                        <option value="fr-CA" <%= (agentConfig && agentConfig.twilioLanguage === 'fr-CA') ? 'selected' : '' %>>French (Canada)</option>
                        <option value="de-DE" <%= (agentConfig && agentConfig.twilioLanguage === 'de-DE') ? 'selected' : '' %>>German (Germany)</option>
                        <option value="it-IT" <%= (agentConfig && agentConfig.twilioLanguage === 'it-IT') ? 'selected' : '' %>>Italian (Italy)</option>
                        <option value="pt-BR" <%= (agentConfig && agentConfig.twilioLanguage === 'pt-BR') ? 'selected' : '' %>>Portuguese (Brazil)</option>
                    </select>
                    <small style="color: #6b7280; font-size: 13px; margin-top: 4px; display: block;">
                        Select the language and locale for Twilio voice calls.
                    </small>
                </div>
                </div>
            <% } %>
            
            <div class="color-input-group">
                <div class="form-group">
                    <label for="primaryColor">Primary Color (hex):</label>
                    <input 
                        type="text" 
                        id="primaryColor" 
                        name="primaryColor" 
                        value="<%= (agentConfig && agentConfig.colorTheme && typeof agentConfig.colorTheme === 'object' && agentConfig.colorTheme.primary) ? agentConfig.colorTheme.primary : '#0ea5e9' %>"
                        placeholder="#0ea5e9"
                        pattern="^#[0-9A-Fa-f]{6}$"
                        title="Please enter a valid hex color (e.g., #0ea5e9)"
                    >
                </div>
                
                <div class="form-group">
                    <label for="secondaryColor">Secondary Color (hex):</label>
                    <input 
                        type="text" 
                        id="secondaryColor" 
                        name="secondaryColor" 
                        value="<%= (agentConfig && agentConfig.colorTheme && typeof agentConfig.colorTheme === 'object' && agentConfig.colorTheme.secondary) ? agentConfig.colorTheme.secondary : '#64748b' %>"
                        placeholder="#64748b"
                        pattern="^#[0-9A-Fa-f]{6}$"
                        title="Please enter a valid hex color (e.g., #64748b)"
                    >
                </div>
            </div>
            
            <button type="submit">Save Settings</button>
        </form>
        
        <div id="formFeedback"></div>
    </div>

    <script>
        // Get form and feedback elements
        const agentSettingsForm = document.getElementById('agentSettingsForm');
        const formFeedback = document.getElementById('formFeedback');
        
        // Add event listener for form submission
        agentSettingsForm.addEventListener('submit', async function(event) {
            event.preventDefault();
            
            // Clear any previous messages
            formFeedback.textContent = '';
            formFeedback.className = '';
            formFeedback.style.display = 'none';
            
            // Get values from input fields
            const agentName = document.getElementById('agentName').value;
            const personaPrompt = document.getElementById('personaPrompt').value;
            const welcomeMessage = document.getElementById('welcomeMessage').value;
            const leadCaptureCompletionMessage = document.getElementById('leadCaptureCompletionMessage').value;
            const primaryColorValue = document.getElementById('primaryColor').value;
            const secondaryColorValue = document.getElementById('secondaryColor').value;
            
            // Get voice agent configuration values (if PRO plan)
            const voiceGreetingMessage = document.getElementById('voiceGreetingMessage')?.value || '';
            const voiceCompletionMessage = document.getElementById('voiceCompletionMessage')?.value || '';
            const voiceEmergencyMessage = document.getElementById('voiceEmergencyMessage')?.value || '';
            const voiceEndCallMessage = document.getElementById('voiceEndCallMessage')?.value || '';
            
            // Get OpenAI TTS configuration values (if PRO plan)
            const ttsProvider = document.getElementById('ttsProvider')?.value || 'realtime';
            const openaiVoice = document.getElementById('openaiVoice')?.value || 'NOVA';
            const openaiModel = document.getElementById('openaiModel')?.value || 'tts-1';
            
            // Construct colorTheme object
            const colorTheme = {
                primary: primaryColorValue,
                secondary: secondaryColorValue
            };
            
            // Construct form data object
            const formData = {
                agentName,
                personaPrompt,
                welcomeMessage,
                leadCaptureCompletionMessage,
                colorTheme,
                voiceGreetingMessage,
                voiceCompletionMessage,
                voiceEmergencyMessage,
                voiceEndCallMessage,
                ttsProvider,
                openaiVoice,
                openaiModel
            };
            
            try {
                // Send POST request to API endpoint
                const response = await fetch('/api/admin/config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                // Handle response
                if (response.ok) {
                    // Success
                    const result = await response.json();
                    formFeedback.textContent = 'Settings saved successfully!';
                    formFeedback.className = 'success';
                    formFeedback.style.display = 'block';
                    
                    // Optional: Redirect with success message after a short delay
                    setTimeout(() => {
                        window.location.href = '/admin/settings?success=true';
                    }, 1500);
                } else {
                    // Error
                    const errorResult = await response.json();
                    formFeedback.textContent = 'Error saving settings: ' + (errorResult.error || 'Unknown error');
                    formFeedback.className = 'error';
                    formFeedback.style.display = 'block';
                }
            } catch (error) {
                // Network or other error
                formFeedback.textContent = 'Error saving settings: ' + error.message;
                formFeedback.className = 'error';
                formFeedback.style.display = 'block';
            }
        });
        
        // Handle OpenAI TTS checkbox toggle (if PRO plan)
        const ttsProviderSelect = document.getElementById('ttsProvider');
        const openaiVoiceSection = document.getElementById('openaiVoiceSection');
        const twilioVoiceSection = document.getElementById('twilioVoiceSection');
        
        if (ttsProviderSelect) {
            function toggleVoiceSections() {
                const ttsProvider = ttsProviderSelect.value;
                
                // Show/hide OpenAI voice section
                if (openaiVoiceSection) {
                    openaiVoiceSection.style.display = ttsProvider === 'realtime' ? 'flex' : 'none';
                }
                
                // Update Twilio section visibility and styling
                if (twilioVoiceSection) {
                    if (ttsProvider === 'realtime') {
                        twilioVoiceSection.style.opacity = '0.6';
                        twilioVoiceSection.style.pointerEvents = 'none';
                    } else {
                        twilioVoiceSection.style.opacity = '1';
                        twilioVoiceSection.style.pointerEvents = 'auto';
                    }
                }
            }
            
            // Initial state
            toggleVoiceSections();
            
            // Handle select changes
            ttsProviderSelect.addEventListener('change', toggleVoiceSections);
        }
    </script>
</body>
</html> 