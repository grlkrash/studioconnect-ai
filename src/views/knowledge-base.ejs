<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Knowledge Base - SMB AI Agent</title>
    <link href="/css/ui.css" rel="stylesheet">
    <style>
      .content-snippet { max-height: 100px; overflow: hidden; }
      .content-snippet.expanded { max-height: none; }
      .read-more { @apply text-brand underline cursor-pointer; }
    </style>
</head>
<body>
    <!-- Top nav -->
    <nav class="bg-brand text-white">
      <div class="container mx-auto flex items-center justify-between px-4 py-3">
        <a href="/admin/dashboard" class="text-lg font-semibold">StudioConnect AI</a>
        <div class="flex gap-6 text-sm">
          <a href="/admin/dashboard" class="hover:underline">Dashboard</a>
          <a href="/admin/leads" class="hover:underline">Clients</a>
          <a href="/admin/settings" class="hover:underline">Agent Settings</a>
          <a href="/admin/knowledge-base" class="underline font-medium">Knowledge Base</a>
          <a href="/api/admin/logout" class="hover:underline">Logout</a>
        </div>
      </div>
    </nav>

    <div class="container">
        <h1 class="text-2xl font-semibold mb-6">Knowledge Base</h1>

        <!-- Project Filter -->
        <% if (projects && projects.length > 0) { %>
          <form method="get" class="mb-4 d-flex align-items-center" id="projectFilterForm">
            <label for="projectId" class="form-label me-2 mb-0">Filter by project:</label>
            <select name="projectId" id="projectId" class="form-select w-auto" onchange="document.getElementById('projectFilterForm').submit()">
              <option value="" <%= !selectedProjectId ? 'selected' : '' %> >All Projects</option>
              <% projects.forEach(p => { %>
                <option value="<%= p.id %>" <%= selectedProjectId === p.id ? 'selected' : '' %>><%= p.name %></option>
              <% }) %>
            </select>
          </form>
        <% } %>

        <!-- Existing Knowledge Base Entries -->
        <div class="knowledge-list">
            <h2>Current Knowledge Base</h2>
            <% if (knowledgeEntries && knowledgeEntries.length > 0) { %>
                <% knowledgeEntries.forEach((entry, index) => { %>
                    <div class="knowledge-entry" data-entry-id="<%= entry.id %>">
                        <div class="content-snippet" id="content-<%= index %>">
                            <% if (entry.content.length > 200) { %>
                                <%= entry.content.substring(0, 200) %>...
                                <span class="read-more" onclick="toggleContent('<%= index %>')">Read more</span>
                            <% } else { %>
                                <%= entry.content %>
                            <% } %>
                        </div>
                        <div class="full-content" id="full-content-<%= index %>" style="display: none;">
                            <%= entry.content %>
                            <span class="read-more" onclick="toggleContent('<%= index %>')">Read less</span>
                        </div>
                        <% if (entry.sourceURL) { %>
                            <div class="source-url mt-2">
                                Source: <a href="<%= entry.sourceURL %>" target="_blank" rel="noopener noreferrer"><%= entry.sourceURL %></a>
                            </div>
                        <% } %>
                        <div class="mt-2">
                            <small>Created: <%= new Date(entry.createdAt).toLocaleString() %></small>
                        </div>
                        <div class="mt-2">
                            <button class="btn btn-sm btn-primary edit-kb-btn"
                                    data-id="<%= entry.id %>"
                                    data-content="<%= encodeURIComponent(entry.content) %>"
                                    data-sourceurl="<%= entry.sourceURL || '' %>">Edit</button>
                            <button class="btn btn-sm btn-danger delete-kb-btn" data-id="<%= entry.id %>">Delete</button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="empty-state">
                    <p>No knowledge base entries added yet.</p>
                    <p>Add your first entry below to help your AI agent answer customer questions!</p>
                </div>
            <% } %>
        </div>

        <!-- Drag & Drop Upload -->
        <div class="card mb-8">
          <div class="card-body">
            <h2 class="card-title mb-4">Upload Document</h2>
            <form id="uploadForm" class="space-y-4">
              <% if (projects && projects.length > 0) { %>
                <div>
                  <label for="uploadProjectId" class="block text-sm font-medium mb-1">Associate with project (optional)</label>
                  <select id="uploadProjectId" name="projectId" class="form-select w-full">
                    <option value="">General (no specific project)</option>
                    <% projects.forEach(p => { %>
                      <option value="<%= p.id %>"><%= p.name %></option>
                    <% }) %>
                  </select>
                </div>
              <% } %>
              <div id="dropzone" class="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:bg-gray-50 transition">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4a1 1 0 011-1h8a1 1 0 011 1v12m-6 4h2m-2 0a2 2 0 002 2h2a2 2 0 002-2v-5a2 2 0 00-2-2h-2a2 2 0 00-2 2v5z" /></svg>
                <p class="mt-4 text-sm text-gray-600">Drag & drop a PDF or TXT file here, or click to browse.</p>
                <input type="file" id="fileInput" accept=".pdf,.txt" class="hidden" />
              </div>
              <div id="uploadFeedback"></div>
            </form>
          </div>
        </div>

        <div class="card">
            <div class="card-body space-y-4">
                <h2 class="card-title">Add Manual Entry</h2>
                <form id="addKnowledgeForm">
                    <div class="mb-3">
                        <label for="content" class="form-label">Content:</label>
                        <textarea 
                            id="content" 
                            name="content" 
                            class="form-control" 
                            rows="5" 
                            placeholder="Enter information that your AI agent can use to answer customer questions..."
                            required
                        ></textarea>
                        <div class="form-text">This content will be used by the AI to answer customer questions.</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="sourceURL" class="form-label">Source URL (Optional):</label>
                        <input 
                            type="text" 
                            id="sourceURL" 
                            name="sourceURL" 
                            class="form-control" 
                            placeholder="https://example.com/source"
                        >
                        <div class="form-text">Add a reference URL if this content comes from a specific source.</div>
                    </div>
                    
                    <% if (projects && projects.length > 0) { %>
                    <div class="mb-3">
                        <label for="kbProjectId" class="form-label">Associated Project (optional):</label>
                        <select id="kbProjectId" name="projectId" class="form-select">
                            <option value="">General (no specific project)</option>
                            <% projects.forEach(p => { %>
                              <option value="<%= p.id %>" <%= selectedProjectId === p.id ? 'selected' : '' %>><%= p.name %></option>
                            <% }) %>
                        </select>
                    </div>
                    <% } %>
                    
                    <button type="submit" class="btn-primary">Add Entry</button>
                </form>
                
                <div id="formFeedback"></div>
            </div>
        </div>
    </div>

    <script>
      // Dropzone behaviour
      const dropzone = document.getElementById('dropzone')
      const fileInput = document.getElementById('fileInput')
      const uploadFeedback = document.getElementById('uploadFeedback')
      const uploadProjectSelect = document.getElementById('uploadProjectId')

      if (dropzone) {
        ;['dragenter','dragover','dragleave','drop'].forEach(evt => {
          dropzone.addEventListener(evt, e => { e.preventDefault(); e.stopPropagation(); })
        })

        ;['dragenter','dragover'].forEach(evt => {
          dropzone.addEventListener(evt, () => dropzone.classList.add('bg-gray-100'))
        })
        ;['dragleave','drop'].forEach(evt => {
          dropzone.addEventListener(evt, () => dropzone.classList.remove('bg-gray-100'))
        })

        dropzone.addEventListener('click', () => fileInput && fileInput.click())
        dropzone.addEventListener('drop', e => {
          if (e.dataTransfer.files && e.dataTransfer.files[0]) handleFile(e.dataTransfer.files[0])
        })
        if (fileInput) {
          fileInput.addEventListener('change', e => {
            if (e.target.files && e.target.files[0]) handleFile(e.target.files[0])
          })
        }

        async function handleFile(file) {
          uploadFeedback.innerHTML = ''
          const fd = new FormData()
          fd.append('file', file)
          if (uploadProjectSelect && uploadProjectSelect.value) fd.append('projectId', uploadProjectSelect.value)
          try {
            const res = await fetch('/api/knowledge-base/upload', { method: 'POST', body: fd })
            if (res.ok) {
              uploadFeedback.innerHTML = '<p class="text-green-600 mt-2 text-sm">Upload successful! Embedding is being generated…</p>'
              setTimeout(() => location.reload(), 1500)
            } else {
              const data = await res.json()
              uploadFeedback.innerHTML = `<p class="text-red-600 mt-2 text-sm">Error: ${data.error || 'Upload failed'}</p>`
            }
          } catch (err) {
            uploadFeedback.innerHTML = '<p class="text-red-600 mt-2 text-sm">Network error. Please try again.</p>'
          }
        }
      }

      // Toggle between snippet and full content
      function toggleContent(index) {
          const snippet = document.getElementById(`content-${index}`);
          const fullContent = document.getElementById(`full-content-${index}`);
          
          if (snippet.style.display === 'none') {
              snippet.style.display = 'block';
              fullContent.style.display = 'none';
          } else {
              snippet.style.display = 'none';
              fullContent.style.display = 'block';
          }
      }

      // Get form elements
      const addKnowledgeForm = document.getElementById('addKnowledgeForm');
      const contentTextarea = document.getElementById('content');
      const sourceURLInput = document.getElementById('sourceURL');
      const submitButton = addKnowledgeForm.querySelector('button[type="submit"]');
      const formHeading = addKnowledgeForm.querySelector('h2');
      const formFeedback = document.getElementById('formFeedback');

      // State for edit mode
      let currentlyEditingKbId = null;

      // Add event listeners for edit buttons
      document.querySelectorAll('.edit-kb-btn').forEach(button => {
          button.addEventListener('click', function(event) {
              event.preventDefault();
              formFeedback.innerHTML = '';

              currentlyEditingKbId = this.dataset.id;
              contentTextarea.value = decodeURIComponent(this.dataset.content || '');
              sourceURLInput.value = this.dataset.sourceurl || '';

              if (formHeading) formHeading.textContent = 'Edit Knowledge Entry';
              submitButton.textContent = 'Update Entry';
              contentTextarea.focus();
          });
      });

      // Form submission handler
      addKnowledgeForm.addEventListener('submit', async (event) => {
          event.preventDefault();
          formFeedback.innerHTML = '';
          
          const content = contentTextarea.value.trim();
          const sourceURL = sourceURLInput.value.trim();
          
          if (!content) {
              formFeedback.innerHTML = '<div class="alert alert-danger">Content is required.</div>';
              return;
          }
          
          const formData = {
              content: content,
              sourceURL: sourceURL || null
          };
          
          const url = currentlyEditingKbId 
              ? `/api/admin/knowledgebase/${currentlyEditingKbId}`
              : '/api/admin/knowledgebase';
          
          const method = currentlyEditingKbId ? 'PUT' : 'POST';
          
          try {
              const response = await fetch(url, {
                  method: method,
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(formData)
              });
              
              if (response.ok) {
                  const message = currentlyEditingKbId 
                      ? 'Knowledge entry updated successfully! Embedding will be regenerated.'
                      : 'Knowledge entry added successfully! Embedding will be generated.';
                  
                  formFeedback.innerHTML = `<div class="alert alert-success">${message}</div>`;
                  
                  setTimeout(() => {
                      window.location.reload();
                  }, 1500);
              } else {
                  const errorData = await response.json();
                  formFeedback.innerHTML = `<div class="alert alert-danger">Error: ${errorData.message || 'Operation failed'}</div>`;
              }
          } catch (error) {
              formFeedback.innerHTML = '<div class="alert alert-danger">Network error. Please try again.</div>';
              console.error('Error submitting form:', error);
          }
      });

      // Delete functionality
      document.querySelectorAll('.delete-kb-btn').forEach(button => {
          button.addEventListener('click', async function(event) {
              event.preventDefault();
              const kbId = this.dataset.id;
              
              if (confirm('Are you sure you want to delete this knowledge base entry?')) {
                  formFeedback.innerHTML = '';
                  
                  try {
                      const response = await fetch(`/api/admin/knowledgebase/${kbId}`, {
                          method: 'DELETE',
                          headers: {
                              'Content-Type': 'application/json'
                          }
                      });

                      if (response.ok) {
                          formFeedback.innerHTML = '<div class="alert alert-success">Entry deleted successfully!</div>';
                          setTimeout(() => {
                              window.location.reload();
                          }, 1500);
                      } else {
                          const errorData = await response.json();
                          formFeedback.innerHTML = `<div class="alert alert-danger">Error: ${errorData.message || 'Failed to delete entry'}</div>`;
                      }
                  } catch (error) {
                      formFeedback.innerHTML = '<div class="alert alert-danger">Network error. Please try again.</div>';
                      console.error('Error deleting entry:', error);
                  }
              }
          });
      });
    </script>
</body>
</html> 