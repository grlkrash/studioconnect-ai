<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Knowledge Base - SMB AI Agent</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .navbar {
            margin-bottom: 2rem;
        }
        .knowledge-entry {
            border-bottom: 1px solid #e0e0e0;
            padding: 1rem 0;
        }
        .knowledge-entry:last-child {
            border-bottom: none;
        }
        .content-snippet {
            max-height: 100px;
            overflow: hidden;
            position: relative;
        }
        .content-snippet.expanded {
            max-height: none;
        }
        .read-more {
            color: #0066cc;
            cursor: pointer;
            text-decoration: underline;
        }
        .source-url {
            font-size: 0.9rem;
            color: #666;
        }
        #formFeedback {
            margin-top: 1rem;
        }
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #666;
        }
        .knowledge-list {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 2rem;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/admin/dashboard">SMB AI Agent</a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/admin/dashboard">Dashboard</a>
                <a class="nav-link" href="/admin/leads">Clients</a>
                <a class="nav-link" href="/admin/settings">Agent Settings</a>
                <a class="nav-link active" href="/admin/knowledge-base">Knowledge Base</a>
                <a class="nav-link" href="/api/admin/logout">Logout</a>
            </div>
        </div>
    </nav>

    <div class="container">
        <h1 class="mb-4">Manage Knowledge Base Entries</h1>

        <!-- Project Filter -->
        <% if (projects && projects.length > 0) { %>
          <form method="get" class="mb-4 d-flex align-items-center" id="projectFilterForm">
            <label for="projectId" class="form-label me-2 mb-0">Filter by project:</label>
            <select name="projectId" id="projectId" class="form-select w-auto" onchange="document.getElementById('projectFilterForm').submit()">
              <option value="" <%= !selectedProjectId ? 'selected' : '' %> >All Projects</option>
              <% projects.forEach(p => { %>
                <option value="<%= p.id %>" <%= selectedProjectId === p.id ? 'selected' : '' %>><%= p.name %></option>
              <% }) %>
            </select>
          </form>
        <% } %>

        <!-- Existing Knowledge Base Entries -->
        <div class="knowledge-list">
            <h2>Current Knowledge Base</h2>
            <% if (knowledgeEntries && knowledgeEntries.length > 0) { %>
                <% knowledgeEntries.forEach((entry, index) => { %>
                    <div class="knowledge-entry" data-entry-id="<%= entry.id %>">
                        <div class="content-snippet" id="content-<%= index %>">
                            <% if (entry.content.length > 200) { %>
                                <%= entry.content.substring(0, 200) %>...
                                <span class="read-more" onclick="toggleContent('<%= index %>')">Read more</span>
                            <% } else { %>
                                <%= entry.content %>
                            <% } %>
                        </div>
                        <div class="full-content" id="full-content-<%= index %>" style="display: none;">
                            <%= entry.content %>
                            <span class="read-more" onclick="toggleContent('<%= index %>')">Read less</span>
                        </div>
                        <% if (entry.sourceURL) { %>
                            <div class="source-url mt-2">
                                Source: <a href="<%= entry.sourceURL %>" target="_blank" rel="noopener noreferrer"><%= entry.sourceURL %></a>
                            </div>
                        <% } %>
                        <div class="mt-2">
                            <small>Created: <%= new Date(entry.createdAt).toLocaleString() %></small>
                        </div>
                        <div class="mt-2">
                            <button class="btn btn-sm btn-primary edit-kb-btn"
                                    data-id="<%= entry.id %>"
                                    data-content="<%= encodeURIComponent(entry.content) %>"
                                    data-sourceurl="<%= entry.sourceURL || '' %>">Edit</button>
                            <button class="btn btn-sm btn-danger delete-kb-btn" data-id="<%= entry.id %>">Delete</button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="empty-state">
                    <p>No knowledge base entries added yet.</p>
                    <p>Add your first entry below to help your AI agent answer customer questions!</p>
                </div>
            <% } %>
        </div>

        <!-- Add New Knowledge Base Entry Form -->
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">Add New Knowledge Entry</h2>
                <form id="addKnowledgeForm">
                    <div class="mb-3">
                        <label for="content" class="form-label">Content:</label>
                        <textarea 
                            id="content" 
                            name="content" 
                            class="form-control" 
                            rows="5" 
                            placeholder="Enter information that your AI agent can use to answer customer questions..."
                            required
                        ></textarea>
                        <div class="form-text">This content will be used by the AI to answer customer questions.</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="sourceURL" class="form-label">Source URL (Optional):</label>
                        <input 
                            type="text" 
                            id="sourceURL" 
                            name="sourceURL" 
                            class="form-control" 
                            placeholder="https://example.com/source"
                        >
                        <div class="form-text">Add a reference URL if this content comes from a specific source.</div>
                    </div>
                    
                    <% if (projects && projects.length > 0) { %>
                    <div class="mb-3">
                        <label for="kbProjectId" class="form-label">Associated Project (optional):</label>
                        <select id="kbProjectId" name="projectId" class="form-select">
                            <option value="">General (no specific project)</option>
                            <% projects.forEach(p => { %>
                              <option value="<%= p.id %>" <%= selectedProjectId === p.id ? 'selected' : '' %>><%= p.name %></option>
                            <% }) %>
                        </select>
                    </div>
                    <% } %>
                    
                    <button type="submit" class="btn btn-primary">Add Entry</button>
                </form>
                
                <div id="formFeedback"></div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Toggle between snippet and full content
        function toggleContent(index) {
            const snippet = document.getElementById(`content-${index}`);
            const fullContent = document.getElementById(`full-content-${index}`);
            
            if (snippet.style.display === 'none') {
                snippet.style.display = 'block';
                fullContent.style.display = 'none';
            } else {
                snippet.style.display = 'none';
                fullContent.style.display = 'block';
            }
        }

        // Get form elements
        const addKnowledgeForm = document.getElementById('addKnowledgeForm');
        const contentTextarea = document.getElementById('content');
        const sourceURLInput = document.getElementById('sourceURL');
        const submitButton = addKnowledgeForm.querySelector('button[type="submit"]');
        const formHeading = addKnowledgeForm.querySelector('h2');
        const formFeedback = document.getElementById('formFeedback');

        // State for edit mode
        let currentlyEditingKbId = null;

        // Add event listeners for edit buttons
        document.querySelectorAll('.edit-kb-btn').forEach(button => {
            button.addEventListener('click', function(event) {
                event.preventDefault();
                formFeedback.innerHTML = '';

                currentlyEditingKbId = this.dataset.id;
                contentTextarea.value = decodeURIComponent(this.dataset.content || '');
                sourceURLInput.value = this.dataset.sourceurl || '';

                if (formHeading) formHeading.textContent = 'Edit Knowledge Entry';
                submitButton.textContent = 'Update Entry';
                contentTextarea.focus();
            });
        });

        // Form submission handler
        addKnowledgeForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            formFeedback.innerHTML = '';
            
            const content = contentTextarea.value.trim();
            const sourceURL = sourceURLInput.value.trim();
            
            if (!content) {
                formFeedback.innerHTML = '<div class="alert alert-danger">Content is required.</div>';
                return;
            }
            
            const formData = {
                content: content,
                sourceURL: sourceURL || null
            };
            
            const url = currentlyEditingKbId 
                ? `/api/admin/knowledgebase/${currentlyEditingKbId}`
                : '/api/admin/knowledgebase';
            
            const method = currentlyEditingKbId ? 'PUT' : 'POST';
            
            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                if (response.ok) {
                    const message = currentlyEditingKbId 
                        ? 'Knowledge entry updated successfully! Embedding will be regenerated.'
                        : 'Knowledge entry added successfully! Embedding will be generated.';
                    
                    formFeedback.innerHTML = `<div class="alert alert-success">${message}</div>`;
                    
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    const errorData = await response.json();
                    formFeedback.innerHTML = `<div class="alert alert-danger">Error: ${errorData.message || 'Operation failed'}</div>`;
                }
            } catch (error) {
                formFeedback.innerHTML = '<div class="alert alert-danger">Network error. Please try again.</div>';
                console.error('Error submitting form:', error);
            }
        });

        // Delete functionality
        document.querySelectorAll('.delete-kb-btn').forEach(button => {
            button.addEventListener('click', async function(event) {
                event.preventDefault();
                const kbId = this.dataset.id;
                
                if (confirm('Are you sure you want to delete this knowledge base entry?')) {
                    formFeedback.innerHTML = '';
                    
                    try {
                        const response = await fetch(`/api/admin/knowledgebase/${kbId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        if (response.ok) {
                            formFeedback.innerHTML = '<div class="alert alert-success">Entry deleted successfully!</div>';
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            const errorData = await response.json();
                            formFeedback.innerHTML = `<div class="alert alert-danger">Error: ${errorData.message || 'Failed to delete entry'}</div>`;
                        }
                    } catch (error) {
                        formFeedback.innerHTML = '<div class="alert alert-danger">Network error. Please try again.</div>';
                        console.error('Error deleting entry:', error);
                    }
                }
            });
        });
    </script>
</body>
</html> 