<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>View Clients & Requests</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
  <div class="container mx-auto px-4 py-8">
    <div class="max-w-7xl mx-auto">
      <!-- Header -->
      <div class="bg-white shadow-sm rounded-lg p-6 mb-6">
        <div class="flex justify-between items-center">
          <h1 class="text-2xl font-bold text-gray-800">Clients & Requests</h1>
          <nav class="space-x-4">
            <a href="/admin/dashboard" class="text-blue-600 hover:text-blue-800">Dashboard</a>
            <a href="/admin/settings" class="text-blue-600 hover:text-blue-800">Agent Settings</a>
            <a href="/admin/lead-questions" class="text-blue-600 hover:text-blue-800">Intake Questions</a>
            <a href="/admin/knowledge-base" class="text-blue-600 hover:text-blue-800">Knowledge Base</a>
          </nav>
        </div>
      </div>

      <!-- Main Content -->
      <div class="bg-white shadow-sm rounded-lg p-6">
        <% if (leads.length === 0) { %>
          <div class="text-center py-8">
            <p class="text-gray-500 text-lg">No leads captured yet.</p>
            <p class="text-gray-400 mt-2">Clients will appear here once they are captured through your AI Account Manager.</p>
          </div>
        <% } else { %>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Date Captured
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Captured Data
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Contact Name
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Contact Email
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Contact Phone
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Notes
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                <% leads.forEach(lead => { %>
                  <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      <%= new Date(lead.createdAt).toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'short', 
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      }) %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <select 
                        class="lead-status-select px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" 
                        data-lead-id="<%= lead.id %>"
                      >
                        <% const statuses = ["NEW", "CONTACTED", "QUALIFIED", "CLOSED_WON", "CLOSED_LOST"]; %>
                        <% statuses.forEach(s => { %>
                          <option value="<%= s %>" <%= lead.status === s ? 'selected' : '' %>><%= s %></option>
                        <% }); %>
                      </select>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-900">
                      <% if (lead.capturedData && Object.keys(lead.capturedData).length > 0) { %>
                        <ul class="space-y-1">
                          <% Object.entries(lead.capturedData).forEach(([key, value]) => { %>
                            <li class="flex">
                              <span class="font-medium text-gray-700 mr-2"><%- key %>:</span>
                              <span class="text-gray-600"><%- value %></span>
                            </li>
                          <% }); %>
                        </ul>
                      <% } else { %>
                        <span class="text-gray-400">No data captured</span>
                      <% } %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      <%= lead.contactName || 'N/A' %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      <% if (lead.contactEmail) { %>
                        <a href="mailto:<%= lead.contactEmail %>" class="text-blue-600 hover:text-blue-800">
                          <%= lead.contactEmail %>
                        </a>
                      <% } else { %>
                        N/A
                      <% } %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      <% if (lead.contactPhone) { %>
                        <a href="tel:<%= lead.contactPhone %>" class="text-blue-600 hover:text-blue-800">
                          <%= lead.contactPhone %>
                        </a>
                      <% } else { %>
                        N/A
                      <% } %>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-900">
                      <div class="lead-notes-display"><%- lead.notes || 'N/A' %></div>
                      <div class="lead-notes-edit" style="display:none;">
                        <textarea class="note-textarea w-full p-2 border rounded-md" rows="3"><%- lead.notes || '' %></textarea>
                        <div class="mt-2 space-x-2">
                          <button class="save-note-btn px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700" data-lead-id="<%= lead.id %>">Save Note</button>
                          <button class="cancel-note-btn px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300">Cancel</button>
                        </div>
                      </div>
                      <button class="edit-note-btn mt-2 px-3 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200">Edit Note</button>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
          
          <!-- Feedback Message Container -->
          <div id="leadsFeedback" class="mt-4 text-sm"></div>
          
          <!-- Optional: Conversation Transcript Preview -->
          <% if (leads.some(lead => lead.conversationTranscript)) { %>
            <div class="mt-6 text-sm text-gray-500">
              <p>ðŸ’¡ Tip: Full conversation transcripts are available in the lead details view (coming soon).</p>
            </div>
          <% } %>
        <% } %>
      </div>
    </div>
  </div>

<script>
  const leadsFeedback = document.getElementById('leadsFeedback')

  document.querySelectorAll('.lead-status-select').forEach(selectElement => {
    selectElement.addEventListener('change', async function() {
      const leadId = this.dataset.leadId
      const newStatus = this.value
      leadsFeedback.textContent = '' // Clear previous messages

      try {
        const response = await fetch(`/api/admin/leads/${leadId}/status`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status: newStatus })
        })

        leadsFeedback.style.color = 'red' // Default
        if (response.ok) {
          leadsFeedback.textContent = 'Status updated successfully!'
          leadsFeedback.style.color = 'green'
        } else {
          const errorResult = await response.json()
          leadsFeedback.textContent = 'Error updating status: ' + (errorResult.error || response.statusText)
        }
      } catch (err) {
        leadsFeedback.style.color = 'red'
        leadsFeedback.textContent = 'Network error or server issue while updating status.'
        console.error('Update lead status error:', err)
      }
    })
  })

  // Note editing functionality
  document.querySelectorAll('.edit-note-btn').forEach(button => {
    button.addEventListener('click', function() {
      const noteCell = this.closest('td')
      noteCell.querySelector('.lead-notes-display').style.display = 'none'
      noteCell.querySelector('.lead-notes-edit').style.display = 'block'
      this.style.display = 'none'
    })
  })

  document.querySelectorAll('.cancel-note-btn').forEach(button => {
    button.addEventListener('click', function() {
      const noteCell = this.closest('td')
      const displayDiv = noteCell.querySelector('.lead-notes-display')
      const editDiv = noteCell.querySelector('.lead-notes-edit')
      editDiv.style.display = 'none'
      displayDiv.style.display = 'block'
      noteCell.querySelector('.edit-note-btn').style.display = 'inline-block'
      editDiv.querySelector('.note-textarea').value = displayDiv.textContent.trim() === 'N/A' ? '' : displayDiv.textContent.trim()
    })
  })

  document.querySelectorAll('.save-note-btn').forEach(button => {
    button.addEventListener('click', async function() {
      const leadId = this.dataset.leadId
      const noteCell = this.closest('td')
      const newNotes = noteCell.querySelector('.note-textarea').value.trim()
      leadsFeedback.textContent = ''

      try {
        const response = await fetch(`/api/admin/leads/${leadId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ notes: newNotes })
        })
        leadsFeedback.style.color = 'red'
        if (response.ok) {
          const updatedLead = await response.json()
          const displayDiv = noteCell.querySelector('.lead-notes-display')
          displayDiv.textContent = updatedLead.notes || 'N/A'
          noteCell.querySelector('.lead-notes-edit').style.display = 'none'
          displayDiv.style.display = 'block'
          noteCell.querySelector('.edit-note-btn').style.display = 'inline-block'
          leadsFeedback.textContent = 'Note saved successfully!'
          leadsFeedback.style.color = 'green'
        } else {
          const errorResult = await response.json()
          leadsFeedback.textContent = 'Error saving note: ' + (errorResult.error || 'Unknown error')
        }
      } catch (err) {
        leadsFeedback.style.color = 'red'
        leadsFeedback.textContent = 'Network error saving note.'
        console.error('Save note error:', err)
      }
    })
  })
</script>
</body>
</html> 